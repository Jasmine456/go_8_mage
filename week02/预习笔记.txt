## 基础数据类型
1. 基础数据类型
bool
byte
rune


2. 复合数据类型
array 数组 值类型
struct 结构体 值类型
string 字符串 UTF-8字符串
slice (nil) 切片 引用类型
map (nil) 引用类型
channel (nil) 管道 引用类型
interface (nil) 接口
function (nil) 函数

3. 自定义类型
自定义类型和类型别名的区别

类型别名
type byte = uint8
type rune = int32

自定义类型：
type signal uint8
type ms map[string]string
type add func(a,b int)int
type user struct {name string;age int}

字符串的常用操作
len(str)  求长度
strings.Split   分割
strings.Contains 判断是否包含
strings.HasPrefix，strings.HasSuffix 前缀/后缀判断

字符串拼
1, 加号链接
2, func fmt.Sprintf(format string,a ...interface{}) string
3, func strings.Join(elems []string,sep string)string
4, 当有大量的string 需要拼接时，用strings.Builder效率最高

byte 和 rune
string中每个元素叫字符，字符有两种
byte 1个字节，代表ASCII码的一个字符
rune 4个字节，代表一个UTF-8字符，一个汉字可用一个rune表示


go 复合数据类型

数组：
    数组是块连续的内存空间，在声明的时候必须指定长度，且长度不能改变。
所以数据在声明的时候就可以把内存从空间分配好，并附上默认值，即完成了初始化。

一维数组，二维数组
cap 代表capacity容量
len 代表length 长度
len代表目前数组里的几个元素，cap代表给数组分配的内存空间可以容纳多少个元素


切片
type slice struct {
array unsafe.Pointer
len int
cap int
}
切片的地址跟数组首元素的地址是两码事

